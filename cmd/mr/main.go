package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode"

	"github.com/declanlin/MapReduce/internal"
)

func wordCountMapF(filename string, contents string) []internal.KeyValue {
	var wc []internal.KeyValue
	IsLetter := func(y rune) bool { // splits the string on something which is not letter
		return !unicode.IsLetter(y)
	}
	for _, word := range strings.FieldsFunc(contents, IsLetter) {
		wc = append(wc, internal.KeyValue{Key: word, Value: "1"})
	}
	return wc
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func wordCountReduceF(key string, values []string) string {
	sum := 0
	for _, val := range values {
		i, err := strconv.Atoi(val)
		if err != nil {
			fmt.Println(err)
		}
		sum += i
	}
	return strconv.Itoa(sum)
}

// func grepMapF(filename string, contents string, pattern string) []internal.KeyValue {
// 	var matches []internal.KeyValue

// 	lines := strings.Split(contents, "\n")
// 	for lineIdx, line := range lines {
// 		if strings.Contains(line, pattern) {
// 			matches = append(matches, internal.KeyValue{
// 				Key:   filename,
// 				Value: fmt.Sprintf("Line %d: %s", lineIdx+1, line),
// 			})
// 		}
// 	}
// 	return matches
// }

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)\n
// 2) Master (e.g., go run wc.go master /tmp/master.sock x1.txt .. xN.txt)\n
// 3) Worker (e.g., go run wc.go worker /tmp/master.sock /tmp/worker<n>.sock &)

func main() {

	const usageStr = "1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)\n" +
		"2) Master (e.g., go run wc.go master /tmp/master.sock x1.txt .. xN.txt)\n" +
		"3) Worker (e.g., go run wc.go worker /tmp/master.sock /tmp/worker<n>.sock &)\n"

	var mr *internal.Master

	if len(os.Args) < 4 {
		fmt.Printf("%s:\n%s", os.Args[0], usageStr)
	} else if os.Args[1] == "master" {

		if os.Args[2] == "sequential" {
			mr = internal.Sequential("master", "wcseq", os.Args[3:], 3, wordCountMapF, wordCountReduceF)
		} else {
			mr = internal.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()

		mr.DeleteFiles()
	} else {
		internal.RunWorker(os.Args[2], os.Args[3], wordCountMapF, wordCountReduceF, 100, nil)
	}

	fmt.Printf("%v\n", time.Since(mr.StartTime))
}
